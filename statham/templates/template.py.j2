{% macro attrib(key, prop, required) -%}
    {{ key }}: {{ prop|type_annotation(key in required) }} = attrib(
        validator=[
            {{ prop|validators }}
        ],
        {% if prop|converter %}
        converter={{ prop|converter }},  # type: ignore
        {% endif %}
        {% if prop|default(key in required) %}
        default={{ prop|default(key in required) }},
        {% endif %}
    )
{%- endmacro %}
from typing import ClassVar, List, Type, Union

from attr import attrs, attrib
from statham import validators as val
from statham.validators import NotPassed


def instantiate(model: Type):
    def _convert(kwargs):
        return model(**kwargs)
    return _convert


def map_instantiate(model: Type):
    def _convert(list_kwargs):
        return [model(**kwargs) for kwargs in list_kwargs]
    return _convert
{% for schema in schemas %}


@attrs(kw_only=True)
class {{ schema.title }}:
    """{{ schema.description }}"""

    _required: ClassVar[List[str]] = {{ schema.required }}

{% for key, prop in schema.properties.items() %}
    {{ attrib(key, prop, schema.required) }}
{% endfor %}
{% endfor %}
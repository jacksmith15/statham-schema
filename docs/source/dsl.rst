.. _dsl:

JSON Schema DSL
===============

The models generated by by this package are part of a Domain-specific language (DSL) for writing JSON Schema in Python. This DSL can be used to write JSON Schema directly, or can be generated from JSON Schema documents on the fly.


Primitives
~~~~~~~~~~

Each JSON Schema is described by an :class:`~statham.dsl.elements.Element` object. The simplest possible schema (equivalent to ``{}`` or ``true``) is expressed as

>>> from statham.dsl.elements import Element
>>> element = Element()

This element will accept any value:

>>> element(1)
1
>>> element("a string!")
"a string"


:class:`~statham.dsl.elements.Element` will also accept JSON Schema keywords as optional arguments:

>>> element = Element(minimum=0, maximum=9)
>>> element(5)
5
>>> element(10)
ValidationError

Schemas which validate against types can be written using subclasses of :class:`~statham.dsl.elements.Element`:

>>> from statham.dsl.elements import String
>>> string = String(minLength=3)
>>> string(1)
ValidationError
>>> string("")
ValidationError
>>> string("a string!")
"a string"

The following primitive elements are available:

* :class:`~statham.dsl.elements.Element` - accepts any type
* :class:`~statham.dsl.elements.Nothing` - accepts no values
* :class:`~statham.dsl.elements.Boolean` - accepts ``bool``
* :class:`~statham.dsl.elements.Integer` - accepts ``int``
* :class:`~statham.dsl.elements.Null` - accepts ``None``
* :class:`~statham.dsl.elements.Number` - accepts ``int`` or ``float``
* :class:`~statham.dsl.elements.String` - accepts ``str``


Containers
~~~~~~~~~~

Array
`````

:class:`~statham.dsl.elements.Array` schemas contain other elements to describe their items. This is set via a positional argument:

>>> from statham.dsl.elements import Array, String
>>> array = Array(String())
>>> array(["a", "string"])
["a", "string"]
>>> array([1, 2])
ValidationError


Object
``````

:class:`~statham.dsl.elements.Object` is a special case, and key to leveraging type-checking with the DSL. Object-typed schemas are declared as sub-classes of :class:`~statham.dsl.elements.Object`.

>>> from statham.dsl.elements import Object, String
>>> from statham.dsl.property import Property
>>>
>>> class StringWrapper(Object):
>>>     value: str = Property(String())
>>>
>>> StringWrapper({"value": "a string"})
StringWrapper(value='a string')

The :class:`~statham.dsl.property.Property` descriptor is used to declare which properties are required, and to rename properties which aren't valid python attributes:

>>> class CustomObject(Object):
>>>     class_: str = Property(String(), required=True, source="class")
>>>
>>> CustomObject({"class": "ABC"})
CustomObject(class_='ABC')

Additional keywords may be set on the schema via class arguments:

>>> class StringWrapper(Object, additionalProperties=False):
>>>     value: str = Property(String())
>>>
>>> StringWrapper({"other": "a string"})
ValidationError

Properties which are accepted via ``additionalProperties`` or ``patternProperties`` are accessible via :func:`__getitem__`:

>>> class StringWrapper(Object):
>>>     value = Property(String())
>>>
>>> value = StringWrapper({"value": "a string", "other": "another string"})
>>> value["other"]
"another string"



